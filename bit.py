# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import os
from telebot import types
import telebot
import sqlite3
import time

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
bot = telebot.TeleBot('1827342878:AAFu1H9bN0k-D-rNOnes8lqKFGniu6QXVQI')

# –ö–æ–º–∞–Ω–¥–∞ start –∏ –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–¥
@bot.message_handler(commands=['start'])
def command_start(message):
    if message.from_user.username is None:
        bot.send_message(message.from_user.id, '–î–æ–±–∞–≤—å—Ç–µ –ò–º—è –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—è(—Ç–µ–≥), —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º')
    else:
        connect = sqlite3.connect('user.bd')
        cursor = connect.cursor()

        cursor.execute("""CREATE TABLE IF NOT EXISTS users_info(
            user_id INTEGER,
            user_teg TEXT
        )""")
        connect.commit()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        people_id = message.from_user.id
        cursor.execute(f"SELECT user_id FROM users_info WHERE user_id = {people_id}")
        data = cursor.fetchone()
        if data is None:
            user_id = message.from_user.id
            user_teg = message.from_user.username

            user_inf = [user_id, user_teg]

            cursor.execute("INSERT INTO users_info VALUES(?,?);", user_inf)
            connect.commit()
        else:
            var = None

        connect = sqlite3.connect('ban_user.bd')
        cursor = connect.cursor()

        cursor.execute("""CREATE TABLE IF NOT EXISTS ban_users_info(
            ban_users_id INT PRIMARY KEY
        )""")

        cursor.execute(f"SELECT ban_users_id FROM ban_users_info WHERE ban_users_id = {people_id}")
        information = cursor.fetchone()
        connect.commit()

        if information is None:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            box = types.KeyboardButton('üóÉ–ö–æ—Ä–æ–±–∫–∞')
            info = types.KeyboardButton('üìã–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
            Cooperation = types.KeyboardButton('üõ†–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ')

            markup.add(box, info, Cooperation)
            send_mess = f"–ü—Ä–∏–≤–µ—Ç <b> {message.from_user.username} </b>!\n–≠—Ç–æ –±–æ—Ç —Å —Ö–∞–ª—è–≤–æ–π\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - @SPICERMr\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø–∏—à–∏\n/help"
            bot.send_message(message.chat.id, send_mess, parse_mode='html', reply_markup=markup)
        else:
            bot.send_message(message.from_user.id, '–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - @SPICERMr')

            connect = sqlite3.connect('user.bd')
            cursor = connect.cursor()

            cursor.execute(f"DELETE FROM users_info WHERE user_id = {people_id}")
            connect.commit()

# –ö–æ–º–∞–Ω–¥–∞ ban
@bot.message_handler(commands=['ban'])
def command_ban(message):
    people_id = message.from_user.id
    if int(people_id) == 1672521583:
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–≥ —é–∑–µ—Ä–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å(–±–µ–∑ @)')

        bot.register_next_step_handler(message, ban_hendler)
    else:
        bot.send_message(message.from_user.id, '‚õîÔ∏è–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä‚õîÔ∏è')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–∞–Ω–∞
def ban_hendler(message):
    teg_for_ban = message.text

    connect = sqlite3.connect('user.bd')
    cursor = connect.cursor()

    cursor.execute('SELECT user_id FROM users_info WHERE user_teg = ?', (teg_for_ban,))
    id_for_ban = cursor.fetchone()
    connect.commit()

    connect = sqlite3.connect('ban_user.bd')
    cursor = connect.cursor()

    cursor.execute(f"SELECT ban_users_id FROM ban_users_info WHERE ban_users_id = {id_for_ban[0]}")
    check = cursor.fetchone()

    if check is None:
        cursor.execute(f'INSERT INTO ban_users_info VALUES(?);', id_for_ban)
        connect.commit()
        bot.send_message(message.from_user.id, '‚úÖ–Æ–∑–µ—Ä –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω—ã—Ö‚úÖ')

        connect = sqlite3.connect('user.bd')
        cursor = connect.cursor()

        cursor.execute(f"DELETE FROM users_info WHERE user_id = {id_for_ban[0]}")
        connect.commit()

    else:
        bot.send_message(message.from_user.id, '‚õîÔ∏è–î–∞–Ω–Ω—ã–π —é–∑–µ—Ä —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω!‚õîÔ∏è')


# –ö–æ–º–∞–Ω–¥–∞ help
@bot.message_handler(commands=['help'])
def command_help(message):
    if message.from_user.username is None:
        bot.send_message(message.from_user.id, '–î–æ–±–∞–≤—å—Ç–µ –ò–º—è –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—è(—Ç–µ–≥), —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º')
    else:
        connect = sqlite3.connect('ban_user.bd')
        cursor = connect.cursor()

        cursor.execute("""CREATE TABLE IF NOT EXISTS ban_users_info(
            ban_users_id INT PRIMARY KEY
        )""")

        people_id = message.from_user.id

        cursor.execute(f"SELECT ban_users_id FROM ban_users_info WHERE ban_users_id = {people_id}")
        information = cursor.fetchone()
        connect.commit()

        if information is None:
            bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ BTC —á–µ–∫ —Å –¥–µ–Ω—å–≥–∞–º–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üóÉ<b>–ö–æ—Ä–æ–±–∫–∞</b> –≤ –∫–æ—Ä–æ–±–∫–µ –Ω–µ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å —á–µ–∫–∏, –ø–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–ª–∞–¥—ë—Ç —á–µ–∫–∏ —Ç—É–¥–∞', parse_mode='html')
        else:
            bot.send_message(message.from_user.id, '–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - @SPICERMr')

# –ö–æ–º–∞–Ω–¥–∞ admin
@bot.message_handler(commands=['admin'])
def command_admin(message):
    user_id = message.from_user.id
    if int(user_id) == 1672521583:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        check = types.KeyboardButton('‚ûï–î–æ–±–∞–≤–∏—Ç—å BTC —á–µ–∫')
        mailing = types.KeyboardButton('üì£–ó–∞–ø—É—Å–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
        exit = types.KeyboardButton('–í—ã—Ö–æ–¥')
        markup.add(check, mailing, exit)
        send_mess = "‚úÖ –ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!"
        bot.send_message(message.chat.id, send_mess, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '‚õî –¢—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(content_types=['text'])
def get_text_message(message, reply_to_user=None):
    if message.from_user.username is None:
        bot.send_message(message.from_user.id, '–î–æ–±–∞–≤—å—Ç–µ –ò–º—è –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—è(—Ç–µ–≥), —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º')
    else:
        connect = sqlite3.connect('ban_user.bd')
        cursor = connect.cursor()

        cursor.execute("""CREATE TABLE IF NOT EXISTS ban_users_info(
            ban_users_id INT PRIMARY KEY
        )""")

        people_id = message.from_user.id

        cursor.execute(f"SELECT ban_users_id FROM ban_users_info WHERE ban_users_id = {people_id}")
        information = cursor.fetchone()
        connect.commit()

        if information is None:
            if message.text == '–í—ã—Ö–æ–¥':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                box = types.KeyboardButton('üóÉ–ö–æ—Ä–æ–±–∫–∞')
                info = types.KeyboardButton('üìã–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
                Cooperation = types.KeyboardButton('üõ†–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ')

                markup.add(box, info, Cooperation)
                send_mess = '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!'
                bot.send_message(message.chat.id, send_mess, parse_mode='html', reply_markup=markup)

            elif message.text == 'üìã–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
                connect = sqlite3.connect('user.bd')
                cursor = connect.cursor()

                cursor.execute("SELECT COUNT(user_id) FROM users_info")
                lines = cursor.fetchone()

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
                exit = types.KeyboardButton('–í—ã—Ö–æ–¥')
                markup.add(exit)
                send_mess = f'–í –±–æ—Ç–µ {lines[0]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üë•'
                bot.send_message(message.chat.id, send_mess, parse_mode='html', reply_markup=markup)

            elif message.text == 'üõ†–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ':
                bot.send_message(message.chat.id, '–î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å–≤—Ç–∞ –ø–∏—à–∏—Ç–µ –µ–º—É @SPICERMr')

            elif message.text == 'üí∏–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
                exit = types.KeyboardButton('–í—ã—Ö–æ–¥')
                markup.add(exit)
                connect = sqlite3.connect('BTC_check.bd')
                cursor = connect.cursor()

                cursor.execute("SELECT * FROM btc_check")
                if cursor.fetchone() is None:
                    connect.commit()
                    bot.send_message(message.from_user.id, 'üòî –£–ø—Å –ø–æ—Ö–æ–∂–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —á–µ–∫–æ–≤ –Ω–µ—Ç', reply_markup=markup)
                else:
                    connect = sqlite3.connect('BTC_check.bd')
                    cursor = connect.cursor()

                    cursor.execute("SELECT check_url FROM btc_check")
                    rows = cursor.fetchone()
                    connect.commit()
                    BTC = rows[0]
                    bot.send_message(message.from_user.id, BTC, reply_markup=markup)

                connect = sqlite3.connect('BTC_check.bd')
                cursor = connect.cursor()

                cursor.execute("""DELETE from btc_check""")
                connect.commit()

            elif message.text == 'üóÉ–ö–æ—Ä–æ–±–∫–∞':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
                BTC_check_button = types.KeyboardButton('üí∏–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫')
                exit = types.KeyboardButton('–í—ã—Ö–æ–¥')
                markup.add(BTC_check_button, exit)

                bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫", parse_mode='html', reply_markup=markup)

            check_for_admin_id = message.from_user.id

            if int(check_for_admin_id) == 1672521583:
                if message.text == '‚ûï–î–æ–±–∞–≤–∏—Ç—å BTC —á–µ–∫':
                    message = bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ BTC —á–µ–∫, –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–ø–∏—à–∏ -')
                    bot.register_next_step_handler(message, message1)

                elif message.text == 'üì£–ó–∞–ø—É—Å–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
                    message = bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–∏—à–∏ -')
                    bot.register_next_step_handler(message, photo)
            else:
                pass
        else:
            bot.send_message(message.from_user.id, '–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - @SPICERMr')


def photo(message):
    sent_message = message.text
    if sent_message == '-':
        bot.send_message(message.chat.id, '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')
    else:
        global photo_id, photo_extension

        photo_id = message.photo[-1].file_id
        file_photo = bot.get_file(photo_id)
        photo_name, photo_extension = os.path.splitext(file_photo.file_path)

        downloaded_photo = bot.download_file(file_photo.file_path)

        src = 'Photo/' + photo_id + photo_extension
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_photo)
        msg = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
        bot.register_next_step_handler(msg, mailig)


def mailig(message):
    mailing_text = message.text
    connect = sqlite3.connect('user.bd')
    cursor = connect.cursor()

    cursor.execute("SELECT user_id FROM users_info")
    all_users_id = cursor.fetchall()
    connect.commit()

    bot.send_message(message.from_user.id, '‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!')

    for i in range(len(all_users_id)):
        try:
            time.sleep(1)
            photo_path = 'Photo/' + photo_id + photo_extension
            photo = open(photo_path, 'rb')
            bot.send_photo(all_users_id[i][0], photo, caption=mailing_text)
        except:
            pass
    bot.send_message(message.from_user.id, '‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')


def message1(message):
    btc_url = message.text
    if btc_url == '-':
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!')
    else:
        bot.send_message(message.chat.id, '‚úÖ BTC —á–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!')

        connect = sqlite3.connect('BTC_check.bd')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS btc_check(
            check_url TEXT
        )""")
        connect.commit()

        cursor.execute("INSERT INTO btc_check VALUES(?);", (btc_url,))
        connect.commit()

bot.polling()